// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/NguyenAnhQuan-Dev/NKbook-API/internal/handlers"
	"github.com/NguyenAnhQuan-Dev/NKbook-API/internal/repositories"
	"github.com/NguyenAnhQuan-Dev/NKbook-API/internal/services"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from bookHandler.go:

func InitBookHandler(db *gorm.DB) (*handlers.BookHandler, error) {
	iBookRepository := repositories.NewBookRepository(db)
	iBookService := services.NewBookService(iBookRepository)
	iAuthorRepository := repositories.NewAuthorRepository(db)
	iAuthorService := services.NewAuthorService(iAuthorRepository)
	iCategoryRepository := repositories.NewCategoryRepository(db)
	iCategoryService := services.NewCategoryService(iCategoryRepository)
	bookHandler := handlers.NewBookHandler(iBookService, iAuthorService, iCategoryService)
	return bookHandler, nil
}

// Injectors from cartHanlder.go:

func IniCartHandler(rd *redis.Client, db *gorm.DB) (*handlers.CartHandler, error) {
	iCartRepository := repositories.NewCartRepository(rd)
	iCartService := services.NewCartService(iCartRepository)
	iBookRepository := repositories.NewBookRepository(db)
	iBookService := services.NewBookService(iBookRepository)
	cartHandler := handlers.NewCartHandler(iCartService, iBookService)
	return cartHandler, nil
}

// Injectors from orderHandler.go:

func InitOrderHandler(db *gorm.DB, rd *redis.Client) (*handlers.OrderHandler, error) {
	iOrderRepository := repositories.NewOrderRepository(db, rd)
	iUserRepository := repositories.NewUserRepository(db)
	iBookRepository := repositories.NewBookRepository(db)
	iCartRepository := repositories.NewCartRepository(rd)
	iOrderService := services.NewOrderService(iOrderRepository, iUserRepository, iBookRepository, iCartRepository)
	orderHandler := handlers.NewOrderHandler(iOrderService)
	return orderHandler, nil
}

// Injectors from userHandler.go:

func InitAuthHandler(db *gorm.DB) (*handlers.AuthHandler, error) {
	iUserRepository := repositories.NewUserRepository(db)
	iTokenRepository := repositories.NewTokenRepository(db)
	iAuthService := services.NewAuthService(iUserRepository, iTokenRepository)
	authHandler := handlers.NewAuthHandler(iAuthService)
	return authHandler, nil
}
